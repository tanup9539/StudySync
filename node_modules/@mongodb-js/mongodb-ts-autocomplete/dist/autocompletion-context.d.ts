import NodeCache from 'node-cache';
import type { JSONSchema } from 'mongodb-schema';
type CacheOptions = {
    databaseCollectionsTTL: number;
    collectionSchemaTTL: number;
    aggregationSchemaTTL: number;
};
export interface AutocompletionContext {
    currentDatabaseAndConnection(): {
        connectionId: string;
        databaseName: string;
    } | undefined;
    databasesForConnection(connectionId: string): Promise<string[]>;
    collectionsForDatabase(connectionId: string, databaseName: string): Promise<string[]>;
    schemaInformationForCollection(connectionId: string, databaseName: string, collectionName: string): Promise<JSONSchema>;
    cacheOptions?: Partial<CacheOptions>;
}
export declare class CachingAutocompletionContext implements AutocompletionContext {
    private readonly delegate;
    private readonly cache;
    readonly cacheOptions: CacheOptions;
    constructor(delegate: AutocompletionContext, cache: NodeCache);
    static caching(delegate: AutocompletionContext): AutocompletionContext;
    currentDatabaseAndConnection(): {
        connectionId: string;
        databaseName: string;
    } | undefined;
    databasesForConnection(connectionId: string): Promise<string[]>;
    collectionsForDatabase(connectionId: string, databaseName: string): Promise<string[]>;
    schemaInformationForCollection(connectionId: string, databaseName: string, collectionName: string): Promise<JSONSchema>;
}
export {};
//# sourceMappingURL=autocompletion-context.d.ts.map