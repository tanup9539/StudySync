import * as ts from 'typescript';
type TypeFilename = string;
type UpdateDefinitionFunction = (newDef: Record<TypeFilename, string | boolean>) => void;
export declare function relativeNodePath(fileName: string): string;
export type AutoCompletion = {
    result: string;
    name: string;
    kind: ts.ScriptElementKind;
};
type AutocompleteFilterOptions = {
    trigger: string;
    kind: string;
    name: string;
};
type AutocompleteFilterFunction = (filterOptions: AutocompleteFilterOptions) => boolean;
export type AutocompleterOptions = {
    filter?: AutocompleteFilterFunction;
    fallbackServiceHost?: ts.LanguageServiceHost;
};
export default class Autocompleter {
    private readonly filter;
    private readonly languageService;
    readonly updateCode: UpdateDefinitionFunction;
    readonly listFiles: () => string[];
    constructor({ filter, fallbackServiceHost }?: AutocompleterOptions);
    autocomplete(code: string): AutoCompletion[];
    debugLanguageService(filename: string, method: 'getSyntacticDiagnostics' | 'getSemanticDiagnostics' | 'getSuggestionDiagnostics'): void;
}
export {};
//# sourceMappingURL=index.d.ts.map