import type { CollectionWithSchema } from './collection';
import type Mongo from './mongo';
import ExplainableCursor from './explainable-cursor';
import { ShellApiWithMongoClass } from './decorators';
import { asPrintable } from './enums';
import type { RemoveShellOptions, FindAndModifyShellOptions, FindAndModifyMethodShellOptions, MapReduceShellOptions } from './helpers';
import type { Document, ExplainVerbosityLike, CountOptions, DistinctOptions, UpdateOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, FindOptions } from '@mongosh/service-provider-core';
import type { MQLDocument, MQLPipeline, MQLQuery } from './mql-types';
export default class Explainable extends ShellApiWithMongoClass {
    _mongo: Mongo;
    _collection: CollectionWithSchema;
    _verbosity: ExplainVerbosityLike;
    constructor(mongo: Mongo, collection: CollectionWithSchema, verbosity: ExplainVerbosityLike);
    [asPrintable](): string;
    private _emitExplainableApiCall;
    getCollection(): CollectionWithSchema;
    getVerbosity(): ExplainVerbosityLike;
    setVerbosity(verbosity: ExplainVerbosityLike): void;
    find(query?: MQLQuery, projection?: Document, options?: FindOptions): Promise<ExplainableCursor>;
    aggregate(pipeline: MQLPipeline, options: Document): Promise<Document>;
    aggregate(...stages: MQLPipeline): Promise<Document>;
    count(query?: {}, options?: CountOptions): Promise<Document>;
    distinct(field: string): Promise<Document>;
    distinct(field: string, query: MQLQuery): Promise<Document>;
    distinct(field: string, query: MQLQuery, options: DistinctOptions): Promise<Document>;
    findAndModify(options: FindAndModifyMethodShellOptions): Promise<Document | null>;
    findOneAndDelete(filter: MQLQuery, options?: FindOneAndDeleteOptions): Promise<Document | null>;
    findOneAndReplace(filter: MQLQuery, replacement: MQLDocument, options?: FindAndModifyShellOptions<FindOneAndReplaceOptions>): Promise<Document>;
    findOneAndUpdate(filter: MQLQuery, update: MQLDocument, options?: FindAndModifyShellOptions<FindOneAndUpdateOptions>): Promise<Document>;
    remove(query: MQLQuery, options?: boolean | RemoveShellOptions): Promise<Document>;
    update(filter: Document, update: Document, options?: UpdateOptions): Promise<Document>;
    mapReduce(map: Function | string, reduce: Function | string, optionsOrOutString: MapReduceShellOptions): Promise<Document>;
}
