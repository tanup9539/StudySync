declare class TypedArray {
    private constructor();
    sort(compareFn: any): any;
    reduce: {
        (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
        (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
        <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U;
    };
    reduceRight: {
        (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
        (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
        <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U;
    };
    findIndex: (predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any) => number;
    find: {
        <S extends any>(predicate: (value: any, index: number, obj: any[]) => value is S, thisArg?: any): S | undefined;
        (predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
    };
    forEach: (callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any) => void;
    map: <U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any) => U[];
    some: (predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any) => boolean;
    every: {
        <S extends any>(predicate: (value: any, index: number, array: any[]) => value is S, thisArg?: any): this is S[];
        (predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any): boolean;
    };
    filter(func: any, thisArg: any): any;
}
declare const origArraySort: (compareFn?: ((a: any, b: any) => number) | undefined) => any[];
declare const origTypedArraySort: any;
declare const origFptS: () => string;
