import { ObjectId, DBRef, MaxKey, MinKey, Timestamp, BSONSymbol, Code, Decimal128, Int32, Long, Binary, calculateObjectSize, Double, BSONRegExp } from 'bson';
export declare const bson: {
    ObjectId: typeof ObjectId;
    DBRef: typeof DBRef;
    MaxKey: typeof MaxKey;
    MinKey: typeof MinKey;
    Timestamp: typeof Timestamp;
    BSONSymbol: typeof BSONSymbol;
    Code: typeof Code;
    Decimal128: typeof Decimal128;
    Int32: typeof Int32;
    Long: typeof Long;
    Binary: typeof Binary;
    calculateObjectSize: typeof calculateObjectSize;
    Double: typeof Double;
    EJSON: {
        parse: (text: string, options?: import("bson").EJSONOptions) => any;
        stringify: (value: any, replacer?: (number | string)[] | ((this: any, key: string, value: any) => any) | import("bson").EJSONOptions, space?: string | number, options?: import("bson").EJSONOptions) => string;
        serialize: (value: any, options?: import("bson").EJSONOptions) => import("bson").Document;
        deserialize: (ejson: import("bson").Document, options?: import("bson").EJSONOptions) => any;
    };
    BSONRegExp: typeof BSONRegExp;
};
